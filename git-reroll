#!/usr/bin/env bash

set -uo pipefail

# proper versioning for the email patch submission workflow.
# GPL-2.0-only license (same as git)

# originally from:
# https://github.com/ttaylorr/dotfiles/blob/1f67d9dac0ed1563b7597746c212814578a9ed7d/bin/git-reroll

# what you by default rebase onto.
# needed until i figure out ~~git-parent~~ auto-recording of newbase in git.
GIT_REROLL_DEFAULT_NEWBASE="${GIT_REROLL_DEFAULT_NEWBASE:-upstream/master}"

git_reroll() {
	test $# -eq 0 && {
		git_reroll__list
		return 0
	}

	case "$1" in
		-c|-create|--create)      shift; git_reroll__create      "$@"; ;;
		-p|-push|--push)          shift; git_reroll__push        "$@"; ;;
		-l|-list|--list)          shift; git_reroll__list        "$@"; ;;
		-L|-last|--last)          shift; git_reroll__last_tag    "$@"; ;;
		-d|-drop|--drop)          shift; git_reroll__drop        "$@"; ;;
		-next|--next)             shift; git_reroll__next_count  "$@"; ;;
		-r|-rd|--rd|--range-diff) shift; git_reroll__range_diff  "$@"; ;;
		-f|-fmt|--fmt|--format)   shift; git_reroll__format_patch "$@"; ;;
		*)
			printf "unknown opt '%s'\n" "$1"
			return 1
		;;
	esac
}

git_reroll__create() {
	topic="$(git_reroll__topic_name "$@")"
	count="$(git_reroll__next_count "$@")"
	committish="${2:-HEAD}"

	git tag "${topic}.v${count}" "${committish}"
	git_reroll__last
}

git_reroll__topic_name() {
	git rev-parse --symbolic-full-name "${1:-HEAD}" \
		| sed -e 's,^refs/heads/,,'
}

git_reroll__next_count() {
	git_reroll__last_tag \
		| grep -o "[[:digit:]]*$" \
		| awk '{ print $0 + 1 }' \
		|| printf "1\n"
}

git_reroll__last() {
	git_reroll__list | tail -1
}
git_reroll__last_tag() {
	git_reroll__last | cut -d' ' -f1
}

git_reroll__list() {
	tip="$(git_reroll__topic_name "$@")"
	head="$(git rev-parse HEAD)"
	has_any=0

	while read -r tag sha; do
		has_any=1

		extra_info=""
		test "$sha" = "$head" && extra_info="$extra_info=HEAD"

		# intentionally wrap objectname with '()'
		# to avoid accidently usable by git (e.g extra arg for range-diff).
		# for using w/ git, always use the refname (tag).
		printf "%s (%s) %s\n" "$tag" "$sha" "$extra_info"
	done \
		< <(git for-each-ref --format='%(refname:short) %(objectname)' "refs/tags/$tip.v*")

	test $has_any -eq 0 && return 1
	return 0
}

git_reroll__push() {
	list="$(git_reroll__list | cut -d' ' -f1)" \
		|| git_reroll__die_has_none

	remote=origin

	set +u
	case "$1" in
		-*) ;; # forward options
		*) if test -n "$1";
			then remote="$1"
			shift
			# BUG: shift: won't apply to actual argv.
			# tho here doesn't matter since nobody else uses it after.
		fi ;;
	esac
	set -u

	(
		trap 'kill 0' SIGINT
		# shellcheck disable=2086 # no quote to expand all tags as separate args
		git push    "$remote"  $list &
		git push -f "$remote" "$(git_reroll__topic_name)" &
		wait
	)
}

git_reroll__die_has_none() {
	>&2 printf "no rerolls yet.\n"
	exit 1
}

git_reroll__drop() {
	git_reroll__last "$@" \
		| sed -e 's,refs/tags/,,' \
		| awk '{ print $1 }' \
		| xargs git tag -d \
		|| git_reroll__die_has_none
}

git_reroll__get_ranges() {
	last="$(git_reroll__last_tag)" \
		|| return 1

	newbase1="$GIT_REROLL_DEFAULT_NEWBASE"

	shifted_argv=0
	set +u
	case "$1" in
		-*) ;; # forward options
		*) if test -n "$1"; then
			newbase1="$1"
			shifted_argv=1
			shift;
		fi
		;;
	esac
	set -u

	newbase2="$(git rev-parse "$newbase1" 2>/dev/null)" || {
		# does not exist

		prefix1="Default"
		prefix2="change default or provide"
		test "$newbase1" != "$GIT_REROLL_DEFAULT_NEWBASE" && {
			prefix1="Provided"
			prefix2="try"
		}

		>&2 printf "%s newbase (%s) does not exist, %s a different one.\n" "$prefix1" "$newbase1" "$prefix2"
		return 1
	}

	# safety check:
	# e.g. if you rebased onto origin/master,
	# but default base is upstream/master,
	# and upstream is more up-to-date,
	# then will find the correct (earlier) base instead.
	newbase3="$(git merge-base "$newbase2" HEAD)"

	did_we_adjust_newbase=""
	if test "$newbase3" != "$newbase2"; then
		did_we_adjust_newbase="(newbase adjusted to earlier)"

		adjusted_newbase_branch="$(git_reroll__try_get_branchname_at "$newbase3")" \
			&& newbase3="$adjusted_newbase_branch"
	fi

	# --octopus and including "$newbase" because:
	#
	# $last..HEAD would be fine if $newbase changed.
	# i.e., range1 would include all commits of the then-branch,
	# and range2 would include all commits of the new branch.
	#
	# but if $newbase didn't change,
	# then merge-base $last HEAD could be earlier than $newbase,
	# in which case there would be fewer commits in $MB..$last
	# than it will be in $newbase..HEAD.
	#
	#
	# now just need to find a way to automatically
	# infer $newbase and we're golden.
	#
	#
	# TODO: why cannot use --forkpoint together w/ --octopus?
	# should we MB=$(git merge-base --forkpoint $MB $last)?
	#
	MB="$(git merge-base --octopus "$last" "HEAD" "$newbase3")"

	oldbase="$MB"
	old="$last"
	#newbase="$newbase"
	new="HEAD"

	adjusted_oldbase_branch="$(git_reroll__try_get_branchname_at "$oldbase")" \
		&& oldbase="$adjusted_oldbase_branch"

	printf "%s %s %s %s %s %s\n" "$oldbase" "$old" "$newbase3" "$new" "$shifted_argv" "$did_we_adjust_newbase"
}

git_reroll__range_diff() {
	git_reroll__safeguard || return 1

	{ git_reroll__get_ranges "$@" || return 1; } \
	| while IFS=' ' read -r oldbase old newbase new shifted_argv did_we_adjust_newbase; do
		test "$shifted_argv" -ne 0 && shift

		range1="$oldbase..$old"
		range2="$newbase..$new"

		git range-diff "$range1" "$range2" "$@"
		>&2 printf "%s  %s  %s\n\n" "$range1" "$range2" "$did_we_adjust_newbase"
	done
}

git_reroll__format_patch() {
	git_reroll__safeguard || return 1

	{ git_reroll__get_ranges "$@" || return 1; } \
	| while IFS=' ' read -r oldbase old newbase new shifted_argv did_we_adjust_newbase; do
		test "$shifted_argv" -ne 0 && shift

		range1="$oldbase..$old"
		range2="$newbase..$new"

		>&2 git range-diff "$range1" "$range2"
		>&2 printf "%s  %s  %s\n\n" "$range1" "$range2" "$did_we_adjust_newbase"

		next_version="$(git_reroll__next_count)"
		git format-patch --base="$newbase" -v"$next_version" --range-diff="$range1" "$range2" "$@"
	done
}

git_reroll__safeguard() {
	head="$(git rev-parse HEAD)"
	last_tag="$(git_reroll__last_tag)" || git_reroll__die_has_none
	last="$(git rev-parse "$last_tag")"

	#if test "$head_ref" != "$last_ref"; then
		# impossible since reroll only gives tags for the current branch
	if test "$head" = "$last"; then
		>&2 printf "REROLL: SHAs identical\n"
		return 1
	else
		git diff --exit-code --numstat "$head" "$last" >/dev/null
		ret=$?
		if test $ret -eq 0; then
			>&2 printf "REROLL: no diff\n"
			return 1
		fi
	fi
	return 0
}

git_reroll__try_get_branchname_at() {
	branches="$(git branch -a --points-at "$1" --format='%(refname:short)')" || return 1
	test -z "$branches" && return 1
	test "$(wc -l <<< "$branches")" -eq 1 || return 1
	printf "%s" "$(printf "%s" "$branches" | head -n1)"
}

# don't run if sourced
test "$0" = "${BASH_SOURCE[0]}" && git_reroll "$@"
